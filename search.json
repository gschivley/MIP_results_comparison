[
  {
    "objectID": "3z-debug-scenarios/figures.html",
    "href": "3z-debug-scenarios/figures.html",
    "title": "Explore model results",
    "section": "",
    "text": "import pandas as pd\nimport altair as alt\nfrom pathlib import Path\n\nalt.renderers.enable(\"png\")\n\ndata_path = Path.cwd()\ndef load_data(fn: str) -&gt; pd.DataFrame:\n    df_list = []\n    for f in data_path.rglob(fn):\n        _df = pd.read_csv(f)\n        df_list.append(_df)\n    df = pd.concat(df_list)\n    if \"resource_name\" in df.columns:\n        df.loc[df[\"resource_name\"].str.contains('ccs'), \"tech_type\"] = \"CCS\"\n    if \"line_name\" in df.columns:\n        df[\"line_name\"] = df[\"line_name\"].str.replace(\"Eastern_to_ERCOT\", \"ERCOT_to_Eastern\")\n    \n    return df"
  },
  {
    "objectID": "3z-debug-scenarios/figures.html#capacity",
    "href": "3z-debug-scenarios/figures.html#capacity",
    "title": "Explore model results",
    "section": "Capacity",
    "text": "Capacity\n\ncap = load_data(\"resource_capacity.csv\")\ncap = cap.query(\"unit=='MW' and not tech_type.isna()\")\ncap.head()\n\n\n\n\n\n\n\n\nmodel\nzone\nresource_name\ntech_type\nplanning_year\ncase\nunit\nstart_value\nend_value\n\n\n\n\n0\nGenX\nERCOT\nERCOT_naturalgas_ccccsavgcf_conservative_0\nCCS\n2040\ngreenfield\nMW\n0.0\n0.126531\n\n\n1\nGenX\nERCOT\nERCOT_naturalgas_ccavgcf_moderate_0\nNatural Gas\n2040\ngreenfield\nMW\n0.0\n44618.100000\n\n\n2\nGenX\nERCOT\nERCOT_naturalgas_ctavgcf_moderate_0\nNatural Gas\n2040\ngreenfield\nMW\n0.0\n27115.900000\n\n\n3\nGenX\nERCOT\nERCOT_battery_moderate_0\nBattery\n2040\ngreenfield\nMW\n0.0\n1143.010000\n\n\n4\nGenX\nERCOT\nERCOT_nuclear_nuclear_moderate_0\nNuclear\n2040\ngreenfield\nMW\n0.0\n0.042764\n\n\n\n\n\n\n\n\n# 2040 case\nchart = alt.Chart(cap.query(\"unit=='MW' and not tech_type.isna() and planning_year == 2040\")).mark_bar().encode(\n    xOffset=\"model:N\",\n    x=\"tech_type\",\n    y=alt.Y(\"sum(end_value)\").title(\"Capacity (MW)\"),\n    color=\"model:N\",\n    column=\"zone\",\n    row=\"case\",\n).properties(width=350, height=250)\n\nchart.save(\"01 - 2040 regional capacity across cases.png\")\n\nchart\n\n&lt;VegaLite 5 object&gt;\n\nIf you see this message, it means the renderer has not been properly enabled\nfor the frontend that you are using. For more information, see\nhttps://altair-viz.github.io/user_guide/display_frontends.html#troubleshooting\n\n\n\n# 2050 case\nchart = alt.Chart(cap.query(\"unit=='MW' and not tech_type.isna() and planning_year == 2050\")).mark_bar().encode(\n    xOffset=\"model:N\",\n    x=\"tech_type\",\n    y=alt.Y(\"sum(end_value)\").title(\"Capacity (MW)\"),\n    color=\"model:N\",\n    column=\"zone\",\n    row=\"case\",\n).properties(width=350, height=250)\n\nchart.save(\"02 - 2050 regional capacity across cases.png\")\nchart\n\n&lt;VegaLite 5 object&gt;\n\nIf you see this message, it means the renderer has not been properly enabled\nfor the frontend that you are using. For more information, see\nhttps://altair-viz.github.io/user_guide/display_frontends.html#troubleshooting\n\n\n\nchart = alt.Chart(cap.query(\"unit=='MW' and planning_year == 2040\")).mark_bar().encode(\n    xOffset=\"model:N\",\n    x=\"tech_type\",\n    y=alt.Y(\"sum(end_value)\").title(\"Capacity (MW)\"),\n    color=\"model:N\",\n    row=\"case\",\n).properties(width=500, height=250)\n\nchart.save(\"03 - 2040 total capacity across cases.png\")\nchart\n\n&lt;VegaLite 5 object&gt;\n\nIf you see this message, it means the renderer has not been properly enabled\nfor the frontend that you are using. For more information, see\nhttps://altair-viz.github.io/user_guide/display_frontends.html#troubleshooting\n\n\n\nchart = alt.Chart(cap.query(\"unit=='MW' and planning_year == 2050\")).mark_bar().encode(\n    xOffset=\"model:N\",\n    x=\"tech_type\",\n    y=alt.Y(\"sum(end_value)\").title(\"Capacity (MW)\"),\n    color=\"model:N\",\n    row=\"case\",\n).properties(width=500, height=250)\n\nchart.save(\"04 - 2050 total capacity across cases.png\")\nchart\n\n&lt;VegaLite 5 object&gt;\n\nIf you see this message, it means the renderer has not been properly enabled\nfor the frontend that you are using. For more information, see\nhttps://altair-viz.github.io/user_guide/display_frontends.html#troubleshooting"
  },
  {
    "objectID": "3z-debug-scenarios/figures.html#generation",
    "href": "3z-debug-scenarios/figures.html#generation",
    "title": "Explore model results",
    "section": "Generation",
    "text": "Generation\n\ngen = load_data(\"generation.csv\")\ngen.head()\n\n\n\n\n\n\n\n\nmodel\nzone\nresource_name\ntech_type\nplanning_year\ncase\ntimestep\nunit\nvalue\n\n\n\n\n0\nGenX\nERCOT\nERCOT_naturalgas_ccccsavgcf_conservative_0\nCCS\n2040\ngreenfield\nall\nMWh\n3.983166e+02\n\n\n1\nGenX\nERCOT\nERCOT_naturalgas_ccavgcf_moderate_0\nNatural Gas\n2040\ngreenfield\nall\nMWh\n9.258969e+07\n\n\n2\nGenX\nERCOT\nERCOT_naturalgas_ctavgcf_moderate_0\nNatural Gas\n2040\ngreenfield\nall\nMWh\n1.265099e+06\n\n\n3\nGenX\nERCOT\nERCOT_battery_moderate_0\nBattery\n2040\ngreenfield\nall\nMWh\n1.135783e+06\n\n\n4\nGenX\nERCOT\nERCOT_nuclear_nuclear_moderate_0\nNuclear\n2040\ngreenfield\nall\nMWh\n2.119619e+02\n\n\n\n\n\n\n\n\nchart = alt.Chart(gen.query(\"planning_year == 2040\")).mark_bar().encode(\n    xOffset=\"model:N\",\n    x=\"tech_type\",\n    y=alt.Y(\"sum(value)\").title(\"Generation (MWh)\"),\n    color=\"model:N\",\n    row=\"case\",\n    column=\"zone\",\n).properties(width=350, height=250)\n\nchart.save(\"05 - 2040 regional generation across cases.png\")\nchart\n\n&lt;VegaLite 5 object&gt;\n\nIf you see this message, it means the renderer has not been properly enabled\nfor the frontend that you are using. For more information, see\nhttps://altair-viz.github.io/user_guide/display_frontends.html#troubleshooting\n\n\n\nchart = alt.Chart(gen.query(\"planning_year == 2050\")).mark_bar().encode(\n    xOffset=\"model:N\",\n    x=\"tech_type\",\n    y=alt.Y(\"sum(value)\").title(\"Generation (MWh)\"),\n    color=\"model:N\",\n    row=\"case\",\n    column=\"zone\",\n).properties(width=350, height=250)\n\nchart.save(\"06 - 2050 regional generation across cases.png\")\nchart\n\n&lt;VegaLite 5 object&gt;\n\nIf you see this message, it means the renderer has not been properly enabled\nfor the frontend that you are using. For more information, see\nhttps://altair-viz.github.io/user_guide/display_frontends.html#troubleshooting\n\n\n\nchart = alt.Chart(gen.query(\"planning_year == 2040\")).mark_bar().encode(\n    xOffset=\"model:N\",\n    x=\"model\",\n    y=alt.Y(\"sum(value)\").title(\"Generation (MWh)\"),\n    color=\"tech_type:N\",\n    row=\"case\",\n).properties(width=350, height=250)\n\nchart.save(\"07 - 2040 total generation across cases.png\")\nchart\n\n&lt;VegaLite 5 object&gt;\n\nIf you see this message, it means the renderer has not been properly enabled\nfor the frontend that you are using. For more information, see\nhttps://altair-viz.github.io/user_guide/display_frontends.html#troubleshooting\n\n\n\nchart = alt.Chart(gen.query(\"planning_year == 2050\")).mark_bar().encode(\n    xOffset=\"model:N\",\n    x=\"model\",\n    y=alt.Y(\"sum(value)\").title(\"Generation (MWh)\"),\n    color=\"tech_type:N\",\n    row=\"case\",\n).properties(width=350, height=250)\n\nchart.save(\"08 - 2050 total generation across cases.png\")\nchart\n\n&lt;VegaLite 5 object&gt;\n\nIf you see this message, it means the renderer has not been properly enabled\nfor the frontend that you are using. For more information, see\nhttps://altair-viz.github.io/user_guide/display_frontends.html#troubleshooting"
  },
  {
    "objectID": "3z-debug-scenarios/figures.html#capacity-factors",
    "href": "3z-debug-scenarios/figures.html#capacity-factors",
    "title": "Explore model results",
    "section": "Capacity factors",
    "text": "Capacity factors\n\ncf = (\n    gen.groupby([\"model\", \"zone\", \"case\", \"tech_type\", \"planning_year\"], sort=False)[\"value\"].sum()\n    / (cap.groupby([\"model\", \"zone\", \"case\", \"tech_type\", \"planning_year\"], sort=False)[\"end_value\"].sum() * 8760)\n    )\ncf.name = \"capacity_factor\"\ncf = pd.DataFrame(cf)\n\ncf[\"capacity\"] = cap.groupby([\"model\", \"zone\", \"case\", \"tech_type\", \"planning_year\"])[\"end_value\"].sum()\ncf = cf.reset_index()\ncf.loc[cf[\"capacity_factor\"] &gt; 1, \"capacity_factor\"] = 1\ncf.head()\n\n\n\n\n\n\n\n\nmodel\nzone\ncase\ntech_type\nplanning_year\ncapacity_factor\ncapacity\n\n\n\n\n0\nGenX\nERCOT\ngreenfield\nCCS\n2040\n0.359358\n0.126531\n\n\n1\nGenX\nERCOT\ngreenfield\nNatural Gas\n2040\n0.149358\n71734.000000\n\n\n2\nGenX\nERCOT\ngreenfield\nBattery\n2040\n0.113433\n1143.010000\n\n\n3\nGenX\nERCOT\ngreenfield\nNuclear\n2040\n0.565811\n0.042764\n\n\n4\nGenX\nERCOT\ngreenfield\nWind\n2040\n0.461757\n95738.451029\n\n\n\n\n\n\n\n\ncf.query(\"case=='greenfield' and planning_year==2050 and tech_type=='Wind'\")\n\n\n\n\n\n\n\n\nmodel\nzone\ncase\ntech_type\nplanning_year\ncapacity_factor\ncapacity\n\n\n\n\n277\nGenX\nERCOT\ngreenfield\nWind\n2050\n0.40112\n159753.741673\n\n\n283\nGenX\nEastern\ngreenfield\nWind\n2050\n0.43754\n536967.385260\n\n\n289\nGenX\nWestern\ngreenfield\nWind\n2050\n0.42669\n147012.586232\n\n\n\n\n\n\n\n\ndrop_techs = [\"Geothermal\"] #, \"Battery\"] \"CCS\", \nyear = 2040\n\nbase = alt.Chart().encode(\n    xOffset=\"model:N\",\n    x=\"tech_type:N\",\n)\n    \nchart_cf = base.mark_point(color=\"black\").encode(\n    alt.Y(\"capacity_factor\").title(\"Capacity Factor\", titleColor=\"blue\"),\n)\n\nchart_cap = base.mark_bar().encode(\n    alt.Y(\"capacity\").title(\"Capacity (MW)\"),\n    # color=\"case\",\n    # tooltip=[\"case\", \"zone\", \"model\", \"tech_type\", \"planning_year\", \"capacity\"],\n)\n\n\nlayer = []\nfor case in cf.case.unique():\n    row = []\n    for zone in cf.zone.unique():\n        row.append(\n            alt.layer(chart_cap, chart_cf, title=f\"{zone}_{year}\", data=cf.query(\"~tech_type.isin(@drop_techs) and zone == @zone and case == @case and planning_year == @year\")\n             ).resolve_scale(y='independent').properties(width=350, height=250)\n        )\n    layer.append(alt.concat(*row).properties(title=case))\n\nchart = alt.vconcat(*layer)\n\nchart.save(\"09 - 2040 regional capacity and CF across cases.png\")\nchart\n\n&lt;VegaLite 5 object&gt;\n\nIf you see this message, it means the renderer has not been properly enabled\nfor the frontend that you are using. For more information, see\nhttps://altair-viz.github.io/user_guide/display_frontends.html#troubleshooting\n\n\n\ndrop_techs = [\"Geothermal\"] #, \"Battery\"] \"CCS\", \nyear = 2050\n\nbase = alt.Chart().encode(\n    xOffset=\"model:N\",\n    x=\"tech_type:N\",\n)\n    \nchart_cf = base.mark_point(color=\"black\").encode(\n    alt.Y(\"capacity_factor\").title(\"Capacity Factor\", titleColor=\"blue\"),\n)\n\nchart_cap = base.mark_bar().encode(\n    alt.Y(\"capacity\").title(\"Capacity (MW)\"),\n    # color=\"case\",\n    # tooltip=[\"case\", \"zone\", \"model\", \"tech_type\", \"planning_year\", \"capacity\"],\n)\n\n\nlayer = []\nfor case in cf.case.unique():\n    row = []\n    for zone in cf.zone.unique():\n        row.append(\n            alt.layer(chart_cap, chart_cf, title=f\"{zone}_{year}\", data=cf.query(\"~tech_type.isin(@drop_techs) and zone == @zone and case == @case and planning_year == @year\")\n             ).resolve_scale(y='independent').properties(width=350, height=250)\n        )\n    layer.append(alt.concat(*row).properties(title=case))\n\nchart = alt.vconcat(*layer)\nchart.save(\"10 - 2050 regional capacity and CF across cases.png\")\nchart\n\n&lt;VegaLite 5 object&gt;\n\nIf you see this message, it means the renderer has not been properly enabled\nfor the frontend that you are using. For more information, see\nhttps://altair-viz.github.io/user_guide/display_frontends.html#troubleshooting"
  },
  {
    "objectID": "3z-debug-scenarios/figures.html#transmission-expansion",
    "href": "3z-debug-scenarios/figures.html#transmission-expansion",
    "title": "Explore model results",
    "section": "Transmission expansion",
    "text": "Transmission expansion\n\ntx_exp = load_data(\"transmission_expansion.csv\")\ntx_exp.head()\n\n\n\n\n\n\n\n\nmodel\nline\nline_name\nplanning_year\ncase\nunit\nvalue\n\n\n\n\n0\nGenX\n1\nERCOT_to_Eastern\n2040\ngreenfield\nMW\n18308.40\n\n\n1\nGenX\n2\nEastern_to_Western\n2040\ngreenfield\nMW\n28757.30\n\n\n2\nGenX\n3\nWestern_to_ERCOT\n2040\ngreenfield\nMW\n9999.96\n\n\n3\nGenX\n1\nERCOT_to_Eastern\n2040\nsingle_zone\nMW\n10000000.00\n\n\n4\nGenX\n2\nEastern_to_Western\n2040\nsingle_zone\nMW\n10000000.00\n\n\n\n\n\n\n\n\nchart = alt.Chart(tx_exp).mark_bar().encode(\n    xOffset=\"model:N\",\n    x=\"line_name\",\n    y=alt.Y(\"sum(value)\").title(\"Transmission expansion (MW)\"),\n    color=\"model:N\",\n    column=\"planning_year\",\n    row=\"case\"\n).resolve_scale(y='independent')\n\nchart.save(\"11 - transmission expansion across cases.png\")\nchart\n\n&lt;VegaLite 5 object&gt;\n\nIf you see this message, it means the renderer has not been properly enabled\nfor the frontend that you are using. For more information, see\nhttps://altair-viz.github.io/user_guide/display_frontends.html#troubleshooting"
  },
  {
    "objectID": "3z-debug-scenarios/figures.html#transmission",
    "href": "3z-debug-scenarios/figures.html#transmission",
    "title": "Explore model results",
    "section": "Transmission",
    "text": "Transmission\n\ntx = load_data(\"transmission.csv\")\ntx.head()\n\n\n\n\n\n\n\n\nmodel\nline\nline_name\nplanning_year\ncase\nunit\nstart_value\nend_value\n\n\n\n\n0\nGenX\n1\nERCOT_to_Eastern\n2040\ngreenfield\nMW\n820\n19128.40\n\n\n1\nGenX\n2\nEastern_to_Western\n2040\ngreenfield\nMW\n820\n29577.30\n\n\n2\nGenX\n3\nWestern_to_ERCOT\n2040\ngreenfield\nMW\n0\n9999.96\n\n\n3\nGenX\n1\nERCOT_to_Eastern\n2040\nsingle_zone\nMW\n820\n10000800.00\n\n\n4\nGenX\n2\nEastern_to_Western\n2040\nsingle_zone\nMW\n820\n10000800.00\n\n\n\n\n\n\n\n\nchart = alt.Chart(tx.query(\"planning_year &gt;= 2030\")).mark_bar().encode(\n    xOffset=\"model:N\",\n    x=\"line_name\",\n    y=alt.Y(\"sum(end_value)\").title(\"Transmission (MW)\"),\n    color=\"model:N\",\n    column=\"planning_year\",\n    row=\"case\",\n).resolve_scale(y='independent')\n\nchart.save(\"12 - total transmission across cases.png\")\nchart\n\n&lt;VegaLite 5 object&gt;\n\nIf you see this message, it means the renderer has not been properly enabled\nfor the frontend that you are using. For more information, see\nhttps://altair-viz.github.io/user_guide/display_frontends.html#troubleshooting"
  },
  {
    "objectID": "3z-debug-scenarios/figures.html#emissions",
    "href": "3z-debug-scenarios/figures.html#emissions",
    "title": "Explore model results",
    "section": "Emissions",
    "text": "Emissions\n\nemiss = load_data(\"emissions.csv\")\nemiss.head()\n\n\n\n\n\n\n\n\nmodel\nzone\nplanning_year\ncase\nunit\nvalue\n\n\n\n\n0\nGenX\nERCOT\n2040\ngreenfield\ntons\n31893500.0\n\n\n1\nGenX\nEastern\n2040\ngreenfield\ntons\n597795000.0\n\n\n2\nGenX\nWestern\n2040\ngreenfield\ntons\n70311900.0\n\n\n3\nGenX\nERCOT\n2040\ncap_only\ntons\n44635700.0\n\n\n4\nGenX\nEastern\n2040\ncap_only\ntons\n525331000.0\n\n\n\n\n\n\n\n\nchart = alt.Chart(emiss).mark_bar().encode(\n    xOffset=\"model:N\",\n    x=\"zone\",\n    y=alt.Y(\"value\").title(\"CO2 emissions (tonnes)\"),\n    color=\"model:N\",\n    column=\"planning_year\",\n    row=\"case\",\n).resolve_scale(y='independent')\n\nchart.save(\"13 - regional emissions across cases.png\")\nchart\n\n&lt;VegaLite 5 object&gt;\n\nIf you see this message, it means the renderer has not been properly enabled\nfor the frontend that you are using. For more information, see\nhttps://altair-viz.github.io/user_guide/display_frontends.html#troubleshooting"
  },
  {
    "objectID": "notebooks/26z-thin-debug-noCO2Cap.html",
    "href": "notebooks/26z-thin-debug-noCO2Cap.html",
    "title": "26 zone thin no CO2 cap",
    "section": "",
    "text": "folder = \"26z-thin-debug-noCO2Cap\"\nimport os\nfrom typing import Dict, List\n\nimport pandas as pd\nimport altair as alt\nfrom pathlib import Path\nfrom fig_functions import fix_tx_line_names, load_genx_operations_data, load_data\n\nalt.renderers.enable(\"html\")\n\ncwd = Path.cwd()\ndata_path = cwd.parent / folder\n\n\n\nfig_num = 0\n\ncap = load_data(data_path, \"resource_capacity.csv\")\ncap = cap.query(\"unit=='MW' and not tech_type.isna()\")\ncap[\"additions\"] = cap[\"end_value\"] - cap[\"start_value\"]\n\ngen = load_data(data_path, \"generation.csv\")\n\ntx = load_data(data_path, \"transmission.csv\")\n\n\ntx[\"start_region\"] = tx[\"line_name\"].str.split(\"_to_\").str[0]\ntx[\"dest_region\"] = tx[\"line_name\"].str.split(\"_to_\").str[1]\n\nfirst_year = tx[\"planning_year\"].min()\nstarting_tx = tx.loc[tx[\"planning_year\"] == first_year, :]\nstarting_tx = starting_tx.rename(columns={\"start_value\": \"value\"})\nstarting_tx[\"planning_year\"] = 2023\n\ntx_exp = load_data(data_path, \"transmission_expansion.csv\")\ntx_exp[\"start_region\"] = tx_exp[\"line_name\"].str.split(\"_to_\").str[0]\ntx_exp[\"dest_region\"] = tx_exp[\"line_name\"].str.split(\"_to_\").str[1]\n\nemiss = load_data(data_path, \"emissions.csv\")\n\nemiss.loc[emiss[\"unit\"] == \"kg\", \"value\"] /= 1000\n\n\ndispatch = load_data(data_path, \"dispatch.csv\")\n\ndispatch = dispatch.groupby(\n    [\n        \"planning_year\",\n        \"model\",\n        \"agg_zone\",\n        \"zone\",\n        \"tech_type\",\n        \"resource_name\",\n        \"hour\",\n    ],\n    as_index=False,\n)[\"value\"].sum()\ngroup_cols = [\"planning_year\", \"model\", \"agg_zone\", \"zone\", \"tech_type\"]\nhours = dispatch[\"hour\"].unique()\nindex_cols = [\"resource_name\"]\ndf_list = []\nfor _, _df in dispatch.groupby(group_cols):\n    multi_index = pd.MultiIndex.from_product(\n        [_df[col].unique() for col in index_cols] + [hours],\n        names=index_cols + [\"hour\"],\n    )\n    _df = _df.set_index(index_cols + [\"hour\"])\n    _df = _df.reindex(index=multi_index, fill_value=0)\n    _df = _df.reset_index()\n    for val, col in zip(_, group_cols):\n        _df[col] = val\n    df_list.append(_df)\n\ndispatch = pd.concat(df_list, ignore_index=True)"
  },
  {
    "objectID": "notebooks/26z-thin-debug-noCO2Cap.html#row",
    "href": "notebooks/26z-thin-debug-noCO2Cap.html#row",
    "title": "26 zone thin no CO2 cap",
    "section": "Row",
    "text": "Row\n\nColumn\n\ncap_data = cap.groupby([\"tech_type\", \"model\", \"planning_year\"], as_index=False)[\n    \"end_value\"\n].sum()\n\nchart = (\n    alt.Chart(cap_data)\n    .mark_bar()\n    .encode(\n        x=\"model\",\n        y=alt.Y(\"sum(end_value)\").title(\"Capacity (MW)\"),\n        color=alt.Color(\"tech_type\").scale(scheme=\"tableau20\"),\n        # column=\"zone\",\n        row=\"planning_year:O\",\n        tooltip=alt.Tooltip(\"end_value\", title=\"Capacity (MW)\", format=\",.0f\")\n    )\n    .properties(width=350, height=250)\n)\nchart\n\n\n\n\n\n\n\n\n\ndata = cap.groupby([\"agg_zone\", \"tech_type\", \"model\", \"planning_year\"], as_index=False)[\n    \"end_value\"\n].sum()\nchart = (\n    alt.Chart(data)\n    .mark_bar()\n    .encode(\n        x=\"model\",\n        y=alt.Y(\"end_value\").title(\"Capacity (MW)\"),\n        color=alt.Color(\"tech_type\").scale(scheme=\"tableau20\"),\n        column=\"agg_zone\",\n        row=\"planning_year:O\",\n        tooltip=alt.Tooltip(\"end_value\", title=\"Capacity (MW)\", format=\",.0f\")\n    )\n    .properties(width=150, height=250)\n)\nchart\n\n\n\n\n\n\n\n\n\n\nColumn\n\ndata = gen.groupby([\"tech_type\", \"model\", \"planning_year\"], as_index=False)[\n    \"value\"\n].sum()\n# ojs_define(gendata = data)\nchart = (\n    alt.Chart(data)\n    .mark_bar()\n    .encode(\n        x=\"model\",\n        y=alt.Y(\"value\").title(\"Generation (MWh)\"),\n        color=alt.Color(\"tech_type\").scale(scheme=\"tableau20\"),\n        # column=\"zone\",\n        row=\"planning_year:O\",\n        tooltip=alt.Tooltip(\"value\", title=\"Generation (MWh)\", format=\",.0f\")\n    )\n    .properties(width=350, height=250)\n)\nchart\n\n\n\n\n\n\n\n\n\ndata = gen.groupby([\"agg_zone\", \"tech_type\", \"model\", \"planning_year\"], as_index=False)[\n    \"value\"\n].sum()\nchart = (\n    alt.Chart(data)\n    .mark_bar()\n    .encode(\n        x=\"model\",\n        y=alt.Y(\"value\").title(\"Generation (MWh)\"),\n        color=alt.Color(\"tech_type\").scale(scheme=\"tableau20\"),\n        column=\"agg_zone\",\n        row=\"planning_year:O\",\n        tooltip=alt.Tooltip(\"value\", title=\"Generation (MWh)\", format=\",.0f\")\n    )\n    .properties(width=150, height=250)\n)\nchart"
  },
  {
    "objectID": "notebooks/26z-thin-debug-noCO2Cap.html#row-1",
    "href": "notebooks/26z-thin-debug-noCO2Cap.html#row-1",
    "title": "26 zone thin no CO2 cap",
    "section": "Row",
    "text": "Row\n\nchart = (\n    alt.Chart(pd.concat([starting_tx, tx_exp]))\n    .mark_bar()\n    .encode(\n        # xOffset=\"model:N\",\n        x=\"model\",\n        y=alt.Y(\"sum(value)\").title(\"Total transmission expansion (MW)\"),\n        color=\"model:N\",\n        opacity=alt.Opacity(\"planning_year:O\", sort=\"descending\"),\n        facet=alt.Facet(\"line_name\", columns=10),\n        order=alt.Order(\n            # Sort the segments of the bars by this field\n            \"planning_year\",\n            sort=\"ascending\",\n        ),\n        tooltip=alt.Tooltip(\"sum(value)\", format=\",.0f\")\n    )\n)\nchart"
  },
  {
    "objectID": "notebooks/26z-thin-debug-noCO2Cap.html#row-2",
    "href": "notebooks/26z-thin-debug-noCO2Cap.html#row-2",
    "title": "26 zone thin no CO2 cap",
    "section": "Row",
    "text": "Row\n\ndata = dispatch.query(\"planning_year==2030\").groupby([\"model\", \"tech_type\", \"agg_zone\", \"hour\"], as_index=False)[\n    \"value\"\n].sum()\nalt.data_transformers.disable_max_rows()\nchart = (\n    alt.Chart(data)\n    .mark_line()\n    .encode(x=\"hour\", y=\"value\", color=\"model\", row=\"tech_type\", column=\"agg_zone\")\n    .properties(width=250, height=150)\n).resolve_scale(y=\"independent\")\nchart\n\n\n\n\n\n\n\n\ndata = dispatch.query(\"planning_year==2040\").groupby([\"model\", \"tech_type\", \"agg_zone\", \"hour\"], as_index=False)[\n    \"value\"\n].sum()\nalt.data_transformers.disable_max_rows()\nchart = (\n    alt.Chart(data)\n    .mark_line()\n    .encode(x=\"hour\", y=\"value\", color=\"model\", row=\"tech_type\", column=\"agg_zone\")\n    .properties(width=250, height=150)\n).resolve_scale(y=\"independent\")\nchart\n\n\n\n\n\n\n\n\ndata = dispatch.query(\"planning_year==2050\").groupby([\"model\", \"tech_type\", \"agg_zone\", \"hour\"], as_index=False)[\n    \"value\"\n].sum()\nalt.data_transformers.disable_max_rows()\nchart = (\n    alt.Chart(data)\n    .mark_line()\n    .encode(x=\"hour\", y=\"value\", color=\"model\", row=\"tech_type\", column=\"agg_zone\")\n    .properties(width=250, height=150)\n).resolve_scale(y=\"independent\")\nchart\n\n\n\n\n\n\n\n\nwind_dispatch = dispatch.query(\"resource_name.str.contains('landbasedwind')\")\nwind_dispatch[\"cluster\"] = wind_dispatch[\"resource_name\"].str.split(\"_\").str[-1]\ndata = wind_dispatch.query(\"planning_year==2030\").groupby([\"model\", \"tech_type\", \"cluster\", \"zone\", \"hour\"], as_index=False)[\n    \"value\"\n].sum()\nalt.data_transformers.disable_max_rows()\nchart = (\n    alt.Chart(data)\n    .mark_line()\n    .encode(x=\"hour\", y=\"value\", color=\"model\", strokeDash=\"cluster\",\n            facet=alt.Facet(\"zone\", columns=5))\n    .properties(width=250, height=150)\n).resolve_scale(y=\"independent\")\nchart\n\n/tmp/ipykernel_2289/3568967919.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  wind_dispatch[\"cluster\"] = wind_dispatch[\"resource_name\"].str.split(\"_\").str[-1]\n\n\n\n\n\n\n\n\n\ndata = wind_dispatch.query(\"planning_year==2040\").groupby([\"model\", \"tech_type\", \"cluster\", \"zone\", \"hour\"], as_index=False)[\n    \"value\"\n].sum()\nalt.data_transformers.disable_max_rows()\nchart = (\n    alt.Chart(data)\n    .mark_line()\n    .encode(x=\"hour\", y=\"value\", color=\"model\", strokeDash=\"cluster\",\n            facet=alt.Facet(\"zone\", columns=5))\n    .properties(width=250, height=150)\n).resolve_scale(y=\"independent\")\nchart\n\n\n\n\n\n\n\n\ndata = wind_dispatch.query(\"planning_year==2050\").groupby([\"model\", \"tech_type\", \"cluster\", \"zone\", \"hour\"], as_index=False)[\n    \"value\"\n].sum()\nalt.data_transformers.disable_max_rows()\nchart = (\n    alt.Chart(data)\n    .mark_line()\n    .encode(x=\"hour\", y=\"value\", color=\"model\", strokeDash=\"cluster\",\n            facet=alt.Facet(\"zone\", columns=5))\n    .properties(width=250, height=150)\n).resolve_scale(y=\"independent\")\nchart"
  },
  {
    "objectID": "notebooks/26z-thin-debug-noCO2Cap.html#row-3",
    "href": "notebooks/26z-thin-debug-noCO2Cap.html#row-3",
    "title": "26 zone thin no CO2 cap",
    "section": "Row",
    "text": "Row\n\nop_costs = load_genx_operations_data(data_path, \"costs.csv\")\nfig_num += 1\nchart = (\n    alt.Chart(\n        op_costs[[\"Costs\", \"Total\", \"model\"]].query(\"Total&gt;0 and Costs != 'cTotal'\")\n    )\n    .mark_bar()\n    .encode(\n        # xOffset=\"model:N\",\n        x=\"model:N\",\n        y=alt.Y(\"Total\").title(\"Costs\"),\n        color=\"Costs:N\",\n        tooltip=alt.Tooltip(\"Total\", format=\",.0f\")\n    )\n)\nchart\n\n\n\n\n\n\n\n\nop_nse = load_genx_operations_data(data_path, \"nse.csv\")\nfig_num += 1\nchart = (\n    alt.Chart(op_nse[[\"Segment\", \"Total\", \"model\"]].query(\"Segment == 'AnnualSum'\"))\n    .mark_bar()\n    .encode(\n        # xOffset=\"model:N\",\n        x=\"model:N\",\n        y=alt.Y(\"Total\").title(\"Annual non-served MWh\"),\n        color=\"model:N\",\n        tooltip=alt.Tooltip(\"Total\", format=\",.0f\")\n    )\n)\nchart"
  },
  {
    "objectID": "notebooks/26z-thin-debug.html",
    "href": "notebooks/26z-thin-debug.html",
    "title": "26 zone thin",
    "section": "",
    "text": "folder = \"26z-thin-debug\"\nimport os\nfrom typing import Dict, List\n\nimport pandas as pd\nimport altair as alt\nfrom pathlib import Path\nfrom fig_functions import fix_tx_line_names, load_genx_operations_data, load_data\n\nalt.renderers.enable(\"html\")\n\ncwd = Path.cwd()\ndata_path = cwd.parent / folder\n\n\n\nfig_num = 0\n\ncap = load_data(data_path, \"resource_capacity.csv\")\ncap = cap.query(\"unit=='MW' and not tech_type.isna()\")\ncap[\"additions\"] = cap[\"end_value\"] - cap[\"start_value\"]\n\ngen = load_data(data_path, \"generation.csv\")\n\ntx = load_data(data_path, \"transmission.csv\")\n\n\ntx[\"start_region\"] = tx[\"line_name\"].str.split(\"_to_\").str[0]\ntx[\"dest_region\"] = tx[\"line_name\"].str.split(\"_to_\").str[1]\n\nfirst_year = tx[\"planning_year\"].min()\nstarting_tx = tx.loc[tx[\"planning_year\"] == first_year, :]\nstarting_tx = starting_tx.rename(columns={\"start_value\": \"value\"})\nstarting_tx[\"planning_year\"] = 2023\n\ntx_exp = load_data(data_path, \"transmission_expansion.csv\")\ntx_exp[\"start_region\"] = tx_exp[\"line_name\"].str.split(\"_to_\").str[0]\ntx_exp[\"dest_region\"] = tx_exp[\"line_name\"].str.split(\"_to_\").str[1]\n\nemiss = load_data(data_path, \"emissions.csv\")\n\nemiss.loc[emiss[\"unit\"] == \"kg\", \"value\"] /= 1000\n\n\ndispatch = load_data(data_path, \"dispatch.csv\")\n\ndispatch = dispatch.groupby(\n    [\n        \"planning_year\",\n        \"model\",\n        \"agg_zone\",\n        \"zone\",\n        \"tech_type\",\n        \"resource_name\",\n        \"hour\",\n    ],\n    as_index=False,\n)[\"value\"].sum()\ngroup_cols = [\"planning_year\", \"model\", \"agg_zone\", \"zone\", \"tech_type\"]\nhours = dispatch[\"hour\"].unique()\nindex_cols = [\"resource_name\"]\ndf_list = []\nfor _, _df in dispatch.groupby(group_cols):\n    multi_index = pd.MultiIndex.from_product(\n        [_df[col].unique() for col in index_cols] + [hours],\n        names=index_cols + [\"hour\"],\n    )\n    _df = _df.set_index(index_cols + [\"hour\"])\n    _df = _df.reindex(index=multi_index, fill_value=0)\n    _df = _df.reset_index()\n    for val, col in zip(_, group_cols):\n        _df[col] = val\n    df_list.append(_df)\n\ndispatch = pd.concat(df_list, ignore_index=True)"
  },
  {
    "objectID": "notebooks/26z-thin-debug.html#row",
    "href": "notebooks/26z-thin-debug.html#row",
    "title": "26 zone thin",
    "section": "Row",
    "text": "Row\n\nColumn\n\ncap_data = cap.groupby([\"tech_type\", \"model\", \"planning_year\"], as_index=False)[\n    \"end_value\"\n].sum()\n\nchart = (\n    alt.Chart(cap_data)\n    .mark_bar()\n    .encode(\n        x=\"model\",\n        y=alt.Y(\"sum(end_value)\").title(\"Capacity (MW)\"),\n        color=alt.Color(\"tech_type\").scale(scheme=\"tableau20\"),\n        # column=\"zone\",\n        row=\"planning_year:O\",\n        tooltip=alt.Tooltip(\"end_value\", title=\"Capacity (MW)\", format=\",.0f\")\n    )\n    .properties(width=350, height=250)\n)\nchart\n\n\n\n\n\n\n\n\n\ndata = cap.groupby([\"agg_zone\", \"tech_type\", \"model\", \"planning_year\"], as_index=False)[\n    \"end_value\"\n].sum()\nchart = (\n    alt.Chart(data)\n    .mark_bar()\n    .encode(\n        x=\"model\",\n        y=alt.Y(\"end_value\").title(\"Capacity (MW)\"),\n        color=alt.Color(\"tech_type\").scale(scheme=\"tableau20\"),\n        column=\"agg_zone\",\n        row=\"planning_year:O\",\n        tooltip=alt.Tooltip(\"end_value\", title=\"Capacity (MW)\", format=\",.0f\")\n    )\n    .properties(width=150, height=250)\n)\nchart\n\n\n\n\n\n\n\n\n\n\nColumn\n\ndata = gen.groupby([\"tech_type\", \"model\", \"planning_year\"], as_index=False)[\n    \"value\"\n].sum()\n# ojs_define(gendata = data)\nchart = (\n    alt.Chart(data)\n    .mark_bar()\n    .encode(\n        x=\"model\",\n        y=alt.Y(\"value\").title(\"Generation (MWh)\"),\n        color=alt.Color(\"tech_type\").scale(scheme=\"tableau20\"),\n        # column=\"zone\",\n        row=\"planning_year:O\",\n        tooltip=alt.Tooltip(\"value\", title=\"Generation (MWh)\", format=\",.0f\")\n    )\n    .properties(width=350, height=250)\n)\nchart\n\n\n\n\n\n\n\n\n\ndata = gen.groupby([\"agg_zone\", \"tech_type\", \"model\", \"planning_year\"], as_index=False)[\n    \"value\"\n].sum()\nchart = (\n    alt.Chart(data)\n    .mark_bar()\n    .encode(\n        x=\"model\",\n        y=alt.Y(\"value\").title(\"Generation (MWh)\"),\n        color=alt.Color(\"tech_type\").scale(scheme=\"tableau20\"),\n        column=\"agg_zone\",\n        row=\"planning_year:O\",\n        tooltip=alt.Tooltip(\"value\", title=\"Generation (MWh)\", format=\",.0f\")\n    )\n    .properties(width=150, height=250)\n)\nchart"
  },
  {
    "objectID": "notebooks/26z-thin-debug.html#row-1",
    "href": "notebooks/26z-thin-debug.html#row-1",
    "title": "26 zone thin",
    "section": "Row",
    "text": "Row\n\nchart = (\n    alt.Chart(pd.concat([starting_tx, tx_exp]))\n    .mark_bar()\n    .encode(\n        # xOffset=\"model:N\",\n        x=\"model\",\n        y=alt.Y(\"sum(value)\").title(\"Total transmission expansion (MW)\"),\n        color=\"model:N\",\n        opacity=alt.Opacity(\"planning_year:O\", sort=\"descending\"),\n        facet=alt.Facet(\"line_name\", columns=10),\n        order=alt.Order(\n            # Sort the segments of the bars by this field\n            \"planning_year\",\n            sort=\"ascending\",\n        ),\n        tooltip=alt.Tooltip(\"sum(value)\", format=\",.0f\")\n    )\n)\nchart"
  },
  {
    "objectID": "notebooks/26z-thin-debug.html#row-2",
    "href": "notebooks/26z-thin-debug.html#row-2",
    "title": "26 zone thin",
    "section": "Row",
    "text": "Row\n\ndata = dispatch.query(\"planning_year==2030\").groupby([\"model\", \"tech_type\", \"agg_zone\", \"hour\"], as_index=False)[\n    \"value\"\n].sum()\nalt.data_transformers.disable_max_rows()\nchart = (\n    alt.Chart(data)\n    .mark_line()\n    .encode(x=\"hour\", y=\"value\", color=\"model\", row=\"tech_type\", column=\"agg_zone\")\n    .properties(width=250, height=150)\n).resolve_scale(y=\"independent\")\nchart\n\n\n\n\n\n\n\n\ndata = dispatch.query(\"planning_year==2040\").groupby([\"model\", \"tech_type\", \"agg_zone\", \"hour\"], as_index=False)[\n    \"value\"\n].sum()\nalt.data_transformers.disable_max_rows()\nchart = (\n    alt.Chart(data)\n    .mark_line()\n    .encode(x=\"hour\", y=\"value\", color=\"model\", row=\"tech_type\", column=\"agg_zone\")\n    .properties(width=250, height=150)\n).resolve_scale(y=\"independent\")\nchart\n\n\n\n\n\n\n\n\ndata = dispatch.query(\"planning_year==2050\").groupby([\"model\", \"tech_type\", \"agg_zone\", \"hour\"], as_index=False)[\n    \"value\"\n].sum()\nalt.data_transformers.disable_max_rows()\nchart = (\n    alt.Chart(data)\n    .mark_line()\n    .encode(x=\"hour\", y=\"value\", color=\"model\", row=\"tech_type\", column=\"agg_zone\")\n    .properties(width=250, height=150)\n).resolve_scale(y=\"independent\")\nchart\n\n\n\n\n\n\n\n\nwind_dispatch = dispatch.query(\"resource_name.str.contains('landbasedwind')\")\nwind_dispatch[\"cluster\"] = wind_dispatch[\"resource_name\"].str.split(\"_\").str[-1]\ndata = wind_dispatch.query(\"planning_year==2030\").groupby([\"model\", \"tech_type\", \"cluster\", \"zone\", \"hour\"], as_index=False)[\n    \"value\"\n].sum()\nalt.data_transformers.disable_max_rows()\nchart = (\n    alt.Chart(data)\n    .mark_line()\n    .encode(x=\"hour\", y=\"value\", color=\"model\", strokeDash=\"cluster\",\n            facet=alt.Facet(\"zone\", columns=5))\n    .properties(width=250, height=150)\n).resolve_scale(y=\"independent\")\nchart\n\n/tmp/ipykernel_2185/3568967919.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  wind_dispatch[\"cluster\"] = wind_dispatch[\"resource_name\"].str.split(\"_\").str[-1]\n\n\n\n\n\n\n\n\n\ndata = wind_dispatch.query(\"planning_year==2040\").groupby([\"model\", \"tech_type\", \"cluster\", \"zone\", \"hour\"], as_index=False)[\n    \"value\"\n].sum()\nalt.data_transformers.disable_max_rows()\nchart = (\n    alt.Chart(data)\n    .mark_line()\n    .encode(x=\"hour\", y=\"value\", color=\"model\", strokeDash=\"cluster\",\n            facet=alt.Facet(\"zone\", columns=5))\n    .properties(width=250, height=150)\n).resolve_scale(y=\"independent\")\nchart\n\n\n\n\n\n\n\n\ndata = wind_dispatch.query(\"planning_year==2050\").groupby([\"model\", \"tech_type\", \"cluster\", \"zone\", \"hour\"], as_index=False)[\n    \"value\"\n].sum()\nalt.data_transformers.disable_max_rows()\nchart = (\n    alt.Chart(data)\n    .mark_line()\n    .encode(x=\"hour\", y=\"value\", color=\"model\", strokeDash=\"cluster\",\n            facet=alt.Facet(\"zone\", columns=5))\n    .properties(width=250, height=150)\n).resolve_scale(y=\"independent\")\nchart"
  },
  {
    "objectID": "notebooks/26z-thin-debug.html#row-3",
    "href": "notebooks/26z-thin-debug.html#row-3",
    "title": "26 zone thin",
    "section": "Row",
    "text": "Row\n\nop_costs = load_genx_operations_data(data_path, \"costs.csv\")\nfig_num += 1\nchart = (\n    alt.Chart(\n        op_costs[[\"Costs\", \"Total\", \"model\"]].query(\"Total&gt;0 and Costs != 'cTotal'\")\n    )\n    .mark_bar()\n    .encode(\n        # xOffset=\"model:N\",\n        x=\"model:N\",\n        y=alt.Y(\"Total\").title(\"Costs\"),\n        color=\"Costs:N\",\n        tooltip=alt.Tooltip(\"Total\", format=\",.0f\")\n    )\n)\nchart\n\n\n\n\n\n\n\n\nop_nse = load_genx_operations_data(data_path, \"nse.csv\")\nfig_num += 1\nchart = (\n    alt.Chart(op_nse[[\"Segment\", \"Total\", \"model\"]].query(\"Segment == 'AnnualSum'\"))\n    .mark_bar()\n    .encode(\n        # xOffset=\"model:N\",\n        x=\"model:N\",\n        y=alt.Y(\"Total\").title(\"Annual non-served MWh\"),\n        color=\"model:N\",\n        tooltip=alt.Tooltip(\"Total\", format=\",.0f\")\n    )\n)\nchart"
  },
  {
    "objectID": "notebooks/26z-thin-debug-highCO2cost.html",
    "href": "notebooks/26z-thin-debug-highCO2cost.html",
    "title": "26 zone thin high CO2 cost",
    "section": "",
    "text": "folder = \"26z-thin-debug-highCCScost\"\nimport os\nfrom typing import Dict, List\n\nimport pandas as pd\nimport altair as alt\nfrom pathlib import Path\nfrom fig_functions import fix_tx_line_names, load_genx_operations_data, load_data\n\nalt.renderers.enable(\"html\")\n\ncwd = Path.cwd()\ndata_path = cwd.parent / folder\n\n\n\nfig_num = 0\n\ncap = load_data(data_path, \"resource_capacity.csv\")\ncap = cap.query(\"unit=='MW' and not tech_type.isna()\")\ncap[\"additions\"] = cap[\"end_value\"] - cap[\"start_value\"]\n\ngen = load_data(data_path, \"generation.csv\")\n\ntx = load_data(data_path, \"transmission.csv\")\n\n\ntx[\"start_region\"] = tx[\"line_name\"].str.split(\"_to_\").str[0]\ntx[\"dest_region\"] = tx[\"line_name\"].str.split(\"_to_\").str[1]\n\nfirst_year = tx[\"planning_year\"].min()\nstarting_tx = tx.loc[tx[\"planning_year\"] == first_year, :]\nstarting_tx = starting_tx.rename(columns={\"start_value\": \"value\"})\nstarting_tx[\"planning_year\"] = 2023\n\ntx_exp = load_data(data_path, \"transmission_expansion.csv\")\ntx_exp[\"start_region\"] = tx_exp[\"line_name\"].str.split(\"_to_\").str[0]\ntx_exp[\"dest_region\"] = tx_exp[\"line_name\"].str.split(\"_to_\").str[1]\n\nemiss = load_data(data_path, \"emissions.csv\")\n\nemiss.loc[emiss[\"unit\"] == \"kg\", \"value\"] /= 1000\n\n\ndispatch = load_data(data_path, \"dispatch.csv\")\n\ndispatch = dispatch.groupby(\n    [\n        \"planning_year\",\n        \"model\",\n        \"agg_zone\",\n        \"zone\",\n        \"tech_type\",\n        \"resource_name\",\n        \"hour\",\n    ],\n    as_index=False,\n)[\"value\"].sum()\ngroup_cols = [\"planning_year\", \"model\", \"agg_zone\", \"zone\", \"tech_type\"]\nhours = dispatch[\"hour\"].unique()\nindex_cols = [\"resource_name\"]\ndf_list = []\nfor _, _df in dispatch.groupby(group_cols):\n    multi_index = pd.MultiIndex.from_product(\n        [_df[col].unique() for col in index_cols] + [hours],\n        names=index_cols + [\"hour\"],\n    )\n    _df = _df.set_index(index_cols + [\"hour\"])\n    _df = _df.reindex(index=multi_index, fill_value=0)\n    _df = _df.reset_index()\n    for val, col in zip(_, group_cols):\n        _df[col] = val\n    df_list.append(_df)\n\ndispatch = pd.concat(df_list, ignore_index=True)"
  },
  {
    "objectID": "notebooks/26z-thin-debug-highCO2cost.html#row",
    "href": "notebooks/26z-thin-debug-highCO2cost.html#row",
    "title": "26 zone thin high CO2 cost",
    "section": "Row",
    "text": "Row\n\nColumn\n\ncap_data = cap.groupby([\"tech_type\", \"model\", \"planning_year\"], as_index=False)[\n    \"end_value\"\n].sum()\n\nchart = (\n    alt.Chart(cap_data)\n    .mark_bar()\n    .encode(\n        x=\"model\",\n        y=alt.Y(\"sum(end_value)\").title(\"Capacity (MW)\"),\n        color=alt.Color(\"tech_type\").scale(scheme=\"tableau20\"),\n        # column=\"zone\",\n        row=\"planning_year:O\",\n        tooltip=alt.Tooltip(\"end_value\", title=\"Capacity (MW)\", format=\",.0f\")\n    )\n    .properties(width=350, height=250)\n)\nchart\n\n\n\n\n\n\n\n\n\ndata = cap.groupby([\"agg_zone\", \"tech_type\", \"model\", \"planning_year\"], as_index=False)[\n    \"end_value\"\n].sum()\nchart = (\n    alt.Chart(data)\n    .mark_bar()\n    .encode(\n        x=\"model\",\n        y=alt.Y(\"end_value\").title(\"Capacity (MW)\"),\n        color=alt.Color(\"tech_type\").scale(scheme=\"tableau20\"),\n        column=\"agg_zone\",\n        row=\"planning_year:O\",\n        tooltip=alt.Tooltip(\"end_value\", title=\"Capacity (MW)\", format=\",.0f\")\n    )\n    .properties(width=150, height=250)\n)\nchart\n\n\n\n\n\n\n\n\n\n\nColumn\n\ndata = gen.groupby([\"tech_type\", \"model\", \"planning_year\"], as_index=False)[\n    \"value\"\n].sum()\n# ojs_define(gendata = data)\nchart = (\n    alt.Chart(data)\n    .mark_bar()\n    .encode(\n        x=\"model\",\n        y=alt.Y(\"value\").title(\"Generation (MWh)\"),\n        color=alt.Color(\"tech_type\").scale(scheme=\"tableau20\"),\n        # column=\"zone\",\n        row=\"planning_year:O\",\n        tooltip=alt.Tooltip(\"value\", title=\"Generation (MWh)\", format=\",.0f\")\n    )\n    .properties(width=350, height=250)\n)\nchart\n\n\n\n\n\n\n\n\n\ndata = gen.groupby([\"agg_zone\", \"tech_type\", \"model\", \"planning_year\"], as_index=False)[\n    \"value\"\n].sum()\nchart = (\n    alt.Chart(data)\n    .mark_bar()\n    .encode(\n        x=\"model\",\n        y=alt.Y(\"value\").title(\"Generation (MWh)\"),\n        color=alt.Color(\"tech_type\").scale(scheme=\"tableau20\"),\n        column=\"agg_zone\",\n        row=\"planning_year:O\",\n        tooltip=alt.Tooltip(\"value\", title=\"Generation (MWh)\", format=\",.0f\")\n    )\n    .properties(width=150, height=250)\n)\nchart"
  },
  {
    "objectID": "notebooks/26z-thin-debug-highCO2cost.html#row-1",
    "href": "notebooks/26z-thin-debug-highCO2cost.html#row-1",
    "title": "26 zone thin high CO2 cost",
    "section": "Row",
    "text": "Row\n\nchart = (\n    alt.Chart(pd.concat([starting_tx, tx_exp]))\n    .mark_bar()\n    .encode(\n        # xOffset=\"model:N\",\n        x=\"model\",\n        y=alt.Y(\"sum(value)\").title(\"Total transmission expansion (MW)\"),\n        color=\"model:N\",\n        opacity=alt.Opacity(\"planning_year:O\", sort=\"descending\"),\n        facet=alt.Facet(\"line_name\", columns=10),\n        order=alt.Order(\n            # Sort the segments of the bars by this field\n            \"planning_year\",\n            sort=\"ascending\",\n        ),\n        tooltip=alt.Tooltip(\"sum(value)\", format=\",.0f\")\n    )\n)\nchart"
  },
  {
    "objectID": "notebooks/26z-thin-debug-highCO2cost.html#row-2",
    "href": "notebooks/26z-thin-debug-highCO2cost.html#row-2",
    "title": "26 zone thin high CO2 cost",
    "section": "Row",
    "text": "Row\n\ndata = dispatch.query(\"planning_year==2030\").groupby([\"model\", \"tech_type\", \"agg_zone\", \"hour\"], as_index=False)[\n    \"value\"\n].sum()\nalt.data_transformers.disable_max_rows()\nchart = (\n    alt.Chart(data)\n    .mark_line()\n    .encode(x=\"hour\", y=\"value\", color=\"model\", row=\"tech_type\", column=\"agg_zone\")\n    .properties(width=250, height=150)\n).resolve_scale(y=\"independent\")\nchart\n\n\n\n\n\n\n\n\ndata = dispatch.query(\"planning_year==2040\").groupby([\"model\", \"tech_type\", \"agg_zone\", \"hour\"], as_index=False)[\n    \"value\"\n].sum()\nalt.data_transformers.disable_max_rows()\nchart = (\n    alt.Chart(data)\n    .mark_line()\n    .encode(x=\"hour\", y=\"value\", color=\"model\", row=\"tech_type\", column=\"agg_zone\")\n    .properties(width=250, height=150)\n).resolve_scale(y=\"independent\")\nchart\n\n\n\n\n\n\n\n\ndata = dispatch.query(\"planning_year==2050\").groupby([\"model\", \"tech_type\", \"agg_zone\", \"hour\"], as_index=False)[\n    \"value\"\n].sum()\nalt.data_transformers.disable_max_rows()\nchart = (\n    alt.Chart(data)\n    .mark_line()\n    .encode(x=\"hour\", y=\"value\", color=\"model\", row=\"tech_type\", column=\"agg_zone\")\n    .properties(width=250, height=150)\n).resolve_scale(y=\"independent\")\nchart\n\n\n\n\n\n\n\n\nwind_dispatch = dispatch.query(\"resource_name.str.contains('landbasedwind')\")\nwind_dispatch[\"cluster\"] = wind_dispatch[\"resource_name\"].str.split(\"_\").str[-1]\ndata = wind_dispatch.query(\"planning_year==2030\").groupby([\"model\", \"tech_type\", \"cluster\", \"zone\", \"hour\"], as_index=False)[\n    \"value\"\n].sum()\nalt.data_transformers.disable_max_rows()\nchart = (\n    alt.Chart(data)\n    .mark_line()\n    .encode(x=\"hour\", y=\"value\", color=\"model\", strokeDash=\"cluster\",\n            facet=alt.Facet(\"zone\", columns=5))\n    .properties(width=250, height=150)\n).resolve_scale(y=\"independent\")\nchart\n\n/tmp/ipykernel_2236/3568967919.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  wind_dispatch[\"cluster\"] = wind_dispatch[\"resource_name\"].str.split(\"_\").str[-1]\n\n\n\n\n\n\n\n\n\ndata = wind_dispatch.query(\"planning_year==2040\").groupby([\"model\", \"tech_type\", \"cluster\", \"zone\", \"hour\"], as_index=False)[\n    \"value\"\n].sum()\nalt.data_transformers.disable_max_rows()\nchart = (\n    alt.Chart(data)\n    .mark_line()\n    .encode(x=\"hour\", y=\"value\", color=\"model\", strokeDash=\"cluster\",\n            facet=alt.Facet(\"zone\", columns=5))\n    .properties(width=250, height=150)\n).resolve_scale(y=\"independent\")\nchart\n\n\n\n\n\n\n\n\ndata = wind_dispatch.query(\"planning_year==2050\").groupby([\"model\", \"tech_type\", \"cluster\", \"zone\", \"hour\"], as_index=False)[\n    \"value\"\n].sum()\nalt.data_transformers.disable_max_rows()\nchart = (\n    alt.Chart(data)\n    .mark_line()\n    .encode(x=\"hour\", y=\"value\", color=\"model\", strokeDash=\"cluster\",\n            facet=alt.Facet(\"zone\", columns=5))\n    .properties(width=250, height=150)\n).resolve_scale(y=\"independent\")\nchart"
  },
  {
    "objectID": "notebooks/26z-thin-debug-highCO2cost.html#row-3",
    "href": "notebooks/26z-thin-debug-highCO2cost.html#row-3",
    "title": "26 zone thin high CO2 cost",
    "section": "Row",
    "text": "Row\n\nop_costs = load_genx_operations_data(data_path, \"costs.csv\")\nfig_num += 1\nchart = (\n    alt.Chart(\n        op_costs[[\"Costs\", \"Total\", \"model\"]].query(\"Total&gt;0 and Costs != 'cTotal'\")\n    )\n    .mark_bar()\n    .encode(\n        # xOffset=\"model:N\",\n        x=\"model:N\",\n        y=alt.Y(\"Total\").title(\"Costs\"),\n        color=\"Costs:N\",\n        tooltip=alt.Tooltip(\"Total\", format=\",.0f\")\n    )\n)\nchart\n\n\n\n\n\n\n\n\nop_nse = load_genx_operations_data(data_path, \"nse.csv\")\nfig_num += 1\nchart = (\n    alt.Chart(op_nse[[\"Segment\", \"Total\", \"model\"]].query(\"Segment == 'AnnualSum'\"))\n    .mark_bar()\n    .encode(\n        # xOffset=\"model:N\",\n        x=\"model:N\",\n        y=alt.Y(\"Total\").title(\"Annual non-served MWh\"),\n        color=\"model:N\",\n        tooltip=alt.Tooltip(\"Total\", format=\",.0f\")\n    )\n)\nchart"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Results",
    "section": "",
    "text": "26 zone thin\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n26 zone thin high CO2 cost\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n26 zone thin no CO2 cap\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  }
]