---
title: "Compare endogenous retirement"
format: dashboard
jupyter: python3
categories:
    - Full
    - Comparison
    - Current policies
    - Base
    - Endogenous retirement
---

```{python}
# | output: false
%load_ext autoreload
%autoreload 2
import os
from typing import Dict, List
import pandas as pd
import altair as alt
from pathlib import Path


alt.renderers.enable("html")
alt.data_transformers.disable_max_rows()

cwd = Path.cwd()
print(cwd)
# data_path = cwd.parent
```
```{python}
# | output: false
from fig_functions import (
    fix_tx_line_names,
    load_genx_operations_data,
    load_data,
    chart_total_cap,
    chart_regional_cap,
    chart_total_gen,
    chart_regional_gen,
    chart_tx_expansion,
    chart_emissions,
    chart_dispatch,
    chart_wind_dispatch,
    chart_op_cost,
    chart_op_nse,
    chart_op_emiss,
    chart_tx_map,
    gdf,
)

data_folders = [
    "full-base-200",
    "full-base-200-retire",
    "full-current-policies",
    "full-current-policies-retire",
]
order = [f for f in data_folders]
data_folders = [cwd.parent / f for f in data_folders]


cap_list = []
gen_list = []
emiss_list = []
tx_list = []
tx_exp_list = []
op_cost_list = []
op_cost_model_list = []
op_nse_list = []
op_gen_list = []
op_cap_list = []
op_emiss_list = []
for folder in data_folders:
    case_id = folder.stem.split("short-")[-1]
    cap_data = load_data(folder, "resource_capacity.csv")
    cap_data = cap_data.query("unit=='MW' and not tech_type.isna()")
    cap_data["case"] = case_id
    cap_list.append(cap_data)

    gen_data = load_data(folder, "generation.csv")
    gen_data["case"] = case_id
    gen_list.append(gen_data)

    emiss_data = load_data(folder, "emissions.csv")
    emiss_data.loc[emiss_data["unit"] == "kg", "value"] /= 1000
    emiss_data["case"] = case_id
    emiss_list.append(emiss_data)

    tx_data = load_data(folder, "transmission.csv")
    tx_data["case"] = case_id
    tx_list.append(tx_data)

    tx_exp_data = load_data(folder, "transmission_expansion.csv")
    tx_exp_data["case"] = case_id
    tx_exp_list.append(tx_exp_data)

    try:
        op_cost_data = load_genx_operations_data(folder, "costs.csv")
        op_cost_data["case"] = case_id
        op_cost_model_data = load_genx_operations_data(
            folder, "costs.csv", model_costs_only=True
        )
        op_cost_model_data["case"] = case_id
        op_cost_list.append(op_cost_data)
        op_cost_model_list.append(op_cost_model_data)

        op_nse_data = load_genx_operations_data(folder, "nse.csv", hourly_data=True)
        op_nse_data["case"] = case_id
        op_nse_list.append(op_nse_data)
    except:
        pass

    op_gen_cap_data = load_genx_operations_data(folder, "capacityfactor.csv")
    if not op_gen_cap_data.empty:
        op_gen_cap_data = op_gen_cap_data.query("~tech_type.str.contains('Other')")
        op_gen_cap_data["case"] = case_id
        op_gen_data = op_gen_cap_data[
            [
                "tech_type",
                "planning_year",
                "model",
                "AnnualSum",
                "resource_name",
                "case",
            ]
        ].rename(columns={"AnnualSum": "value"})
        op_cap_data = op_gen_cap_data[
            ["tech_type", "planning_year", "model", "Capacity", "resource_name", "case"]
        ].rename(columns={"Capacity": "end_value"})
        op_cap_data["unit"] = "MW"
        op_gen_list.append(op_gen_data)
        op_cap_list.append(op_cap_data)

    op_emiss_data = load_genx_operations_data(folder, "emissions.csv", hourly_data=True)
    op_emiss_data["case"] = case_id
    op_emiss_list.append(op_emiss_data)

cap = pd.concat(cap_list, ignore_index=True)
gen = pd.concat(gen_list, ignore_index=True)
for hour in [2, 4, 6, 8]:
    cap["resource_name"] = cap["resource_name"].str.replace(f"_{hour}hour", "")
    gen["resource_name"] = gen["resource_name"].str.replace(f"_{hour}hour", "")
emiss = pd.concat(emiss_list, ignore_index=True)
tx = pd.concat(tx_list, ignore_index=True)
tx_exp = pd.concat(tx_exp_list, ignore_index=True)
op_costs = pd.concat(op_cost_list, ignore_index=True)
op_costs_model = pd.concat(op_cost_model_list, ignore_index=True)
op_nse = pd.concat(op_nse_list, ignore_index=True)
op_emiss = pd.concat(op_emiss_list, ignore_index=True)
if op_cap_list:
    op_gen = pd.concat(op_gen_list, ignore_index=True)
    op_cap = pd.concat(op_cap_list, ignore_index=True)
else:
    op_gen = pd.DataFrame()
    op_cap = pd.DataFrame()

tx["start_region"] = tx["line_name"].str.split("_to_").str[0]
tx["dest_region"] = tx["line_name"].str.split("_to_").str[1]

first_year = tx["planning_year"].min()
starting_tx = tx.loc[tx["planning_year"] == first_year, :]
starting_tx = starting_tx.rename(columns={"start_value": "value"})
starting_tx["planning_year"] = 2023

tx_exp["start_region"] = tx_exp["line_name"].str.split("_to_").str[0]
tx_exp["dest_region"] = tx_exp["line_name"].str.split("_to_").str[1]

from fig_functions import WRAPPED_CASE_NAME_MAP

for df in [
    cap,
    gen,
    emiss,
    starting_tx,
    tx_exp,
    op_costs,
    op_nse,
    op_costs_model,
    op_emiss,
    op_gen,
    op_cap,
]:
    df["case"] = df["case"].map(WRAPPED_CASE_NAME_MAP)

```

# Capacity by Model

## Row

#### Column {.tabset}

```{python}
# | title: Total Capacity
chart = chart_total_cap(cap, x_var="model", col_var="case", order=order)
chart
```
```{python}
# | title: New-build Capacity
chart = chart_total_cap(
    cap.loc[cap["new_build"] == True, :], x_var="model", col_var="case", order=order
)
chart
```
```{python}
# | title: Existing Capacity
chart = chart_total_cap(
    cap.loc[cap["new_build"] == False, :], x_var="model", col_var="case", order=order
)
chart
```

```{python}
# | title: 2050 Regional Capacity
chart = chart_total_cap(
    cap.query("planning_year==2050"),
    x_var="case",
    row_var="model",
    col_var="agg_zone",
    order=order,
)
chart
```

# Average Capacity by Case

## Row

#### Column {.tabset}

```{python}
# | title: Total Capacity
from fig_functions import calc_mean_annual_cap, chart_avg_new_tech_variation

avg_total_cap = calc_mean_annual_cap(cap, new_build=False)

chart = chart_total_cap(
    avg_total_cap.reset_index(),
    row_var=None,
    col_var="planning_year",
    x_var="case",
    order=order,
)
chart
```
```{python}
# | title: New-build Capacity
total_new_cap = (
    cap.query("new_build == True")
    .groupby(["case", "planning_year", "tech_type", "model"], as_index=False)[
        "end_value"
    ]
    .sum()
)
mean_new_cap = (
    total_new_cap.groupby(["case", "planning_year", "tech_type"], as_index=False)[
        "end_value"
    ]
    .agg(["mean", "min", "max"])
    .rename(columns={"mean": "end_value"})
)
chart = chart_total_cap(
    mean_new_cap, row_var=None, col_var="planning_year", x_var="case", order=order
)
chart
```
```{python}
# | title: New-build Capacity by Region
region_avg_new_cap = calc_mean_annual_cap(cap, by_agg_zone=True, new_build=True)
region_chart = chart_total_cap(region_avg_new_cap.reset_index(), x_var="case", col_var="planning_year", row_var="agg_zone", order=order)
region_chart
```
```{python}
# | title: New-build Capacity by Type
annual_new_cap_mean = calc_mean_annual_cap(cap)
chart = chart_avg_new_tech_variation(annual_new_cap_mean, x_var="case", col_var="tech_type", order=order)
chart
```

```{python}
# | title: New-build Capacity by Type and Region
chart = chart_avg_new_tech_variation(
    region_avg_new_cap, row_var="agg_zone", order=order
)
chart
```

```{python}
# | title: New-build Capacity by Region and Type
chart = chart_avg_new_tech_variation(
    region_avg_new_cap,
    row_var="agg_zone",
    x_var="case",
    col_var="tech_type",
    order=order,
)
chart
```
# Generation
## Row
### Column {.tabset}
```{python}
# | title: Total generation 
chart = chart_total_gen(gen, cap, x_var="model", col_var="case", order=order)
chart
```

```{python}
# | title: Average generation by year and tech
from fig_functions import chart_avg_gen_variation, calc_mean_annual_gen

avg_annual_gen = calc_mean_annual_gen(gen, by_agg_zone=False)
chart = chart_avg_gen_variation(
    avg_annual_gen,
    x_var="case",
    col_var="tech_type",
    xOffset="planning_year",
    order=order,
    height=125,
    width=alt.Step(60),
)
chart
```

```{python}
# | title: Average generation by year, region and tech
from fig_functions import chart_avg_gen_variation, calc_mean_annual_gen

avg_annual_gen = calc_mean_annual_gen(gen, by_agg_zone=True)
chart = chart_avg_gen_variation(
    avg_annual_gen,
    x_var="case",
    col_var="tech_type",
    row_var="agg_zone",
    xOffset="planning_year",
    order=order,
    height=125,
    width=alt.Step(60),
)
chart
```

# Emissions

```{python}
chart = chart_emissions(emiss, x_var="model", col_var="case", order=order)
chart
```

# Transmission
## Row

#### Column {.tabset}

```{python}
# | title: Expansion by line
tx_all = pd.concat([starting_tx, tx_exp])
chart = chart_tx_expansion(
    tx_all, x_var="case", facet_col=None, col_var="line_name", row_var="model", order=order
)
chart
```

```{python}
# | title: Total expansion
chart = chart_tx_expansion(
    tx_all, x_var="case", facet_col=None, col_var="model", order=order
)
# chart = chart_tx_expansion(
#     tx_all, x_var="model", facet_col=None, col_var="case", order=order
# )
chart
```
```{python}
# | title: Map by case
tx_exp_data = (
    tx_exp.groupby(
        ["line_name", "planning_year", "case", "start_region", "dest_region"],
        as_index=False,
    )["value"]
    .mean()
    .sort_values("case")
)

chart = chart_tx_map(
    tx_exp_data,
    gdf,
    facet_col="case",
)
chart
```

```{python}
# | title: Map by case, drop lines < 50 MW
tx_exp_data = (
    tx_exp.groupby(
        ["line_name", "planning_year", "case", "start_region", "dest_region"],
        as_index=False,
    )["value"]
    .mean()
    .query("value >= 50").sort_values("case")
)

chart = chart_tx_map(
    tx_exp_data,
    gdf,
    facet_col="case",
)
chart
```

# Operational Results
## Row {.tabset}

```{python}
# | title: Operational costs (model)
chart = chart_op_cost(
    op_costs_model, col_var="case", x_var="model", row_var="planning_year", order=order
)
chart
```

```{python}
# | title: Operational costs (society)
chart = chart_op_cost(
    op_costs, col_var="case", x_var="model", row_var="planning_year", order=order
)
chart
```

```{python}
# | title: Generation
try:
    chart = chart_total_gen(
        op_gen,
        op_cap,
        col_var="case",
        x_var="model",
        row_var="planning_year",
        order=order,
    )
    chart
except:
    pass
```

```{python}
# | title: Emissions by zone
chart = chart_emissions(
    op_emiss,
    col_var="case",
    x_var="model",
    # row_var="planning_year",
    # color="Region",
    order=order,
)
chart
```

```{python}
# | title: Power cost
from fig_functions import chart_cost_mwh

chart = chart_cost_mwh(
    op_costs, col_var="case", x_var="model", row_var="planning_year", order=order
)
chart
```